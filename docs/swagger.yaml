definitions:
  dto.CreateMeasurementInput:
    properties:
      confirmed:
        type: boolean
      image:
        type: string
      type:
        type: string
      user:
        type: string
      value:
        type: integer
    type: object
  dto.CreateUserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.GetTokenInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.GetTokenOutput:
    properties:
      access_token:
        type: string
    type: object
  entity.Measurement:
    properties:
      confirmed:
        type: boolean
      created_at:
        type: string
      id:
        type: string
      image:
        type: string
      type:
        type: string
      user:
        type: string
      value:
        type: integer
    type: object
  entity.User:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  handlers.Error:
    properties:
      message:
        type: string
    type: object
info:
  contact:
    email: melkz.siqueira@gmail.com
    name: Melkz Siqueira
    url: https://linkedin.com/in/melkzsiqueira
  description: Water and Gas Measurement API with auhtentication
  license:
    name: Apache-2.0 license
    url: https://github.com/melkzsiqueira/water-gas-measurement?tab=Apache-2.0-1-ov-file#
  termsOfService: http://swagger.io/terms/
  title: Water and Gas Measurement
  version: "1.0"
paths:
  /measurements:
    get:
      consumes:
      - application/json
      description: Get all measurements
      parameters:
      - description: page number
        in: query
        name: page
        type: string
      - description: records limit
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Measurement'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: List measurements
      tags:
      - measurements
    post:
      consumes:
      - application/json
      description: Create measurement
      parameters:
      - description: measurement request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMeasurementInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Measurement'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Create measurement
      tags:
      - measurements
  /measurements/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a measurement
      parameters:
      - description: measurement ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Measurement'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete a measurement
      tags:
      - measurements
    get:
      consumes:
      - application/json
      description: Get a measurement
      parameters:
      - description: measurement ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Measurement'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a measurement
      tags:
      - measurements
    put:
      consumes:
      - application/json
      description: Update a measurement
      parameters:
      - description: product ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: measurement request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMeasurementInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Measurement'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Update a measurement
      tags:
      - measurements
  /measurements/{id}/image:
    get:
      consumes:
      - application/json
      description: Get a measurement image
      parameters:
      - description: measurement ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.Error'
      security:
      - ApiKeyAuth: []
      summary: Get a measurement image
      tags:
      - measurements
  /users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.Error'
      summary: Create user
      tags:
      - users
  /users/token:
    post:
      consumes:
      - application/json
      description: Get a user token
      parameters:
      - description: user credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GetTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetTokenOutput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.Error'
      summary: Get a user token
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
